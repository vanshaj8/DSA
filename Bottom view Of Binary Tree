#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	int hd;
	Node *left;
	Node *right;
	
	Node(int key)
	{
		data=key;
		hd=INT_MAX;
		left=right=NULL;
	}
};
// Method that prints the Bottom view 
void bottomView(Node *root)
{
	if(root==NULL)
	{
		return ;
	}
	
	// Initalise the root variable 'hd' with 0 for the root Elemnt
	int hd=0;
	// Map creeation
	map<int,int> m;
	// Queue creation
	queue<Node*> q;
	
	root->hd=hd;
	q.push(root);
	
	// Level order loop
	while(!q.empty())
	{
		Node *temp=q.front();
		q.pop();
		hd=temp->hd;
		// putting the horizontal distance as key
		m[hd]=temp->data;
		
		if(temp->left!=NULL)
		{
			temp->left->hd=hd-1;
			q.push(temp->left);
		}
		if(temp->right!=NULL)
		{
			temp->right->hd=hd+1;
			q.push(temp->right);
		}
	}
	
	// Traverse the map elements using the iterator
	for(auto i=m.begin(); i!= m.end();i++)
	{
		cout<<i->second<<" ";
	}
	
}

int main()
{
	Node *root = new Node(20); 
    root->left = new Node(8); 
    root->right = new Node(22); 
    root->left->left = new Node(5); 
    root->left->right = new Node(3); 
    root->right->left = new Node(4); 
    root->right->right = new Node(25); 
    root->left->right->left = new Node(10); 
    root->left->right->right = new Node(14); 
    cout << "Bottom view of the given binary tree :\n";
    bottomView(root);
	
	
	
	return 0;
}
