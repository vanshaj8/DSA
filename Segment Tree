#include<bits/stdc++.h>
using namespace std;



int getMid(int s ,int e)
{
	return (s+e)/2;
}
/* A recursive function to get the sum of values in the given range 
	of the array. The following are parameters for this function. 

	st --> Pointer to segment tree 
	si --> Index of current node in the segment tree. Initially 
			0 is passed as root is always at index 0 
	ss & se --> Starting and ending indexes of the segment represented 
				by current node, i.e., st[si] 
	qs & qe --> Starting and ending indexes of query range */


// qs and qe is overlapped by ss and se
int getSumUtil(int *st,int ss,int se,int qs,int qe,int si)
{
	// If Segment of this node is a part of the given range then return  the sum of the segment;
	if(qs<=ss && qe>=se)
	{
		return st[si];   // Condition for total overlap
	}
	
	// If segemnt of this node is outside the given range
	if(qs>se ||qe<ss)
	{
		return 0;
	}
	
	int mid=getMid(ss,se);
	return getSumUtil(st,ss,mid,qs,qe,2*si+1)+getSumUtil(st,mid+1,se,qs,qe,2*si+2);
}
// Return sum of elements in the Given range query from indez qs(query start)
// to qe(query end). It mainly uses getSumUtil()
int getSum(int *st,int n,int qs ,int qe)
{
	if(qs<0 || qe>n-1 || qs>qe)
	{
		cout<<"Invalid Input";
		return -1;
	}
	
	return getSumUtil(st,0,n-1,qs,qe,0);
}
// Function to Construct Segment Tree using Recursion
int constructSTUtil(int arr[],int ss,int se,int *st,int si)
{
	// si is index of current node in st
	// If there is one elemment in an array store in the current node of Segment tree and return also the Condition of the Leaf Node
	if(ss==se)
	{
		st[si]=arr[ss];
		return arr[ss];
	}
	// IF there are more than elements then recur for left and right subtrees and store the sum of values in the node
	
	int mid=getMid(ss,se);
	st[si]=constructSTUtil(arr,ss,mid,st,2*si+1)+constructSTUtil(arr,mid+1,se,st,2*si+2);	
	
	
	return st[si];
	
}
// Fucntion to consrtuct Segment Tree from given array.This function allocates memory from segment tree and Calls ConstructSTutil() to fill allocated memory
int *constructST(int arr[],int n)
{
	// Allocate memory of segment tree
	
	// Height of Binary Tree
	int x=(int)(ceil(log2(n))); // Ceil function is used to get the nearest Integer greater than argument passed;
	// Maximum size of segment tree
	
	int max_size=2*(int)pow(2,x)-1;
	
	// Allocate Memory
	int *st=new int[max_size];
	// Fill the allocated memory with st
	constructSTUtil(arr,0,n-1,st,0);
	
	// Return The constructed Segment tree
	
	
	return st;
}

int main()
{
	int arr[]={1,3,5,7,9,11};
	int n=sizeof(arr)/sizeof(arr[0]);
	
	// Constructing a Segment Tree From Given array
	
	int *st=constructST(arr,n);
	
	
	// Print The sum fo values in the given Rnge from index 1 and 3
	cout<<"Sum of values in the given range= "<<getSum(st,n,1,3)<<endl;
	
	
	
	return 0;
}



