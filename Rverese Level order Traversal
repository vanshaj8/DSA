#include<iostream>
#include<queue>
#include<stack>
#include<bits/stdc++.h>
using namespace std;

struct btnode
{
	int data;
	btnode* left;
	btnode* right;
};

btnode* create(int value)
{
	btnode* newnode=new btnode();
	newnode->data=value;
	newnode->left=NULL;
	newnode->right=NULL;
	
	return newnode;
}
/*
void levelorder(btnode* root)
{
	if(root==NULL)
	{
		return ;
	}
	else
	{
		queue<btnode*>q;
		q.push(root);
		while(!q.empty())
		{
			btnode* current =q.front();
			q.pop();
			cout<<current->data<<" ";
			if(current->left!=NULL)
			{
				q.push(current->left);
			}
			if(current->right!=NULL)
			{
				q.push(current->right);
			}
		}
	}
}
*/
void reverselevelorder(btnode* root)
{
	if(root==NULL)
	{
		return ;
	}
	else
	{
		stack<btnode*> s;
		queue<btnode*>q;
		q.push(root);
		while(!q.empty())
		{
			btnode* current=q.front();
			q.pop();
			s.push(current);
			if(current->left) q.push(current->left);
			if(current->right) q.push(current->right);
		}
		
		while(!s.empty())
		{
			root=s.top();
			cout<<root->data;
			s.pop();
		}
		
		
	}
}
int main()
{
	btnode* root=create(1);
	root->left=create(2);
	root->right=create(3);
	root->left->left=create(4);
	root->left->right=create(5);
	root->right->left=create(6);
	root->right->right=create(7);
	reverselevelorder(root);

	
	
	
	
	
	return 0;
	
}















