#include<iostream>
using namespace std;

// Applications of Heaps
/*

Heap sort : Heap sort uses Binar Heap to sort an array in nlog n time

left child is 2*i+1
Right child is 2*i+2
and parent of any node at index i is given by the lower bound of (i-1)/2;

All nodes in the tree follow the property that they are greater than their childrn.

*/

void heapify(int arr[],int n,int i)
{
	// Find largest among root,left and right child
	int largest=i;
	int left=2*i+ 1;
	int right=2*i+ 2;
	if(left<n && arr[left]>arr[largest])
	{
		largest=left;
	}
	if(right<n && arr[right]>arr[largest])
	{
		largest =right;
	}
	
	// Swap and continue heapifying if root is not the largest
	if(largest!=i)
	{
		swap(arr[i],arr[largest]);
		heapify(arr,n,largest);
	}
}

void heapSort(int arr[],int n)
{
	
	// Build max heap
	
	for(int i=n/2-1;i>=0;i--)
	{
		heapify(arr,n,i);
	}
	
	// Heap Sort
	for(int i=n-1;i>=0;i--)
	{
		swap(arr[0],arr[i]);
		
		heapify(arr,i,0);
	}
}
void printArray(int arr[], int n) {
    for (int i = 0; i < n; ++i)
      cout << arr[i] << " ";
    cout << "\n";
  }
int main()
{
	int arr[] = {1, 12, 9, 5, 6, 10};
    int n = sizeof(arr) / sizeof(arr[0]);
    heapSort(arr, n);
  
    cout << "Sorted array is \n";
    printArray(arr, n);
	
	return 0;
}
