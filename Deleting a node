#include<iostream>
using namespace std;
struct bstnode
{
	int data;
	bstnode* left;
	bstnode* right;
	
};

bstnode* getnewnode(int value)
{
	bstnode* newnode=new bstnode();
	newnode->data=value;
	newnode->left=NULL;
	newnode->right=NULL;
	
	return newnode;
}
bstnode* insert(bstnode* root,int data)
{
	if(root==NULL)
	{
		root=getnewnode(data);
	}
	else if(data<=root->data)
	{
		root->left=insert(root->left,data);
	}
	else
	{
		root->right=insert(root->right,data);
	}
	
	return root;
}
bool search(bstnode* root,int value)
{
	if(root==NULL)
	{
		return false;
	}
	else if(root->data==value)
	{
		return true;
	}
	else if(value<=root->data)
	{
		return search(root->left,value);
	}
	else 
	{
		return search(root->right,value);
	}
}

bstnode* FindMin(bstnode* root)
{
	while(root->left != NULL) root = root->left;
	return root;
}
bstnode* deletenode(bstnode* root,int value)
{
	if(root==NULL)
	{
		return root;
	}
	if(value<root->data)
	{
		root->left=deletenode(root->left,value);
	}
	else if(value>root->data)
	{
		root->right=deletenode(root->right,value);
	}
	else
	{
		// Case 1 Root is leaf node
		if(root->left==NULL&&root->right==NULL)
		{
			delete root;
			root=NULL;
		}
		// Case 2 if root has a NUll left or right child
		else if(root->left==NULL)
		{
			bstnode* temp=root;
			root=root->right;
			delete temp;
		}
		else if(root->right==NULL)
		{
			bstnode* temp=root;
			root=root->left;
			delete temp;
		}
		// Case 3 2 children
		else
		{
			bstnode* temp=FindMin(root->right);
			root->data=temp->data;
			root->right=deletenode(root->right,temp->data);
		}
		
		
	}
	return root;
}

void inorder(bstnode* root)
{
	if(root==NULL)
	{
		return;
	}
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}
int main()
{
	bstnode* root=NULL;
	root=insert(root,1);
	root=insert(root,2);
	root=insert(root,3);
	root=insert(root,4);
	root=insert(root,5);
	root=insert(root,6);
	root=insert(root,7);

  root=deletenode(root,5);
  inorder(root);
	
	
	
	
	return 0;
}
